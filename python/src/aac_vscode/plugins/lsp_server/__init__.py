"""__init__.py module for the LSP Server plugin."""
# WARNING - DO NOT EDIT - YOUR CHANGES WILL NOT BE PROTECTED.
# This file is auto-generated by the aac gen-plugin and may be overwritten.

from os.path import join, dirname
from copy import deepcopy
from typing import Any
from aac.execute.plugin_runner import AacCommand
from aac.execute.aac_execution_result import (
    ExecutionResult,
    ExecutionStatus,
    ExecutionMessage,
)
from aac.lang.schema import Schema
from aac.lang.plugininputvalue import PluginInputValue
from aac.execute import hookimpl
from aac.context.language_context import LanguageContext
from aac.context.definition import Definition
from aac.execute.plugin_runner import PluginRunner
from aac.context.source_location import SourceLocation


from aac_vscode.plugins.lsp_server.lsp_server_impl import (
    plugin_name,
    start_lsp_io,
    start_lsp_tcp,
)


lsp_server_aac_file_name = "lsp_server.aac"


def run_start_lsp_io() -> ExecutionResult:
    """Start the AaC Language Server Protocol (LSP) server in IO mode."""

    result = ExecutionResult(plugin_name, "start-lsp-io", ExecutionStatus.SUCCESS, [])

    start_lsp_io_result = start_lsp_io()
    if not start_lsp_io_result.is_success():
        return start_lsp_io_result
    else:
        result.add_messages(start_lsp_io_result.messages)

    return result


def run_start_lsp_tcp(host: str, port: float) -> ExecutionResult:
    """Start the AaC Language Server Protocol (LSP) server in TCP mode."""

    result = ExecutionResult(plugin_name, "start-lsp-tcp", ExecutionStatus.SUCCESS, [])

    start_lsp_tcp_result = start_lsp_tcp(host, port)
    if not start_lsp_tcp_result.is_success():
        return start_lsp_tcp_result
    else:
        result.add_messages(start_lsp_tcp_result.messages)

    return result


@hookimpl
def register_plugin() -> None:
    """
    Returns information about the plugin.

    Returns:
        A collection of information about the plugin and what it contributes.
    """

    active_context = LanguageContext()
    lsp_server_aac_file = join(dirname(__file__), lsp_server_aac_file_name)
    definitions = active_context.parse_and_load(lsp_server_aac_file)

    lsp_server_plugin_definition = [
        definition for definition in definitions if definition.name == plugin_name
    ][0]

    plugin_instance = lsp_server_plugin_definition.instance
    for file_to_load in plugin_instance.definition_sources:
        active_context.parse_and_load(file_to_load)

    plugin_runner = PluginRunner(plugin_definition=lsp_server_plugin_definition)
    plugin_runner.add_command_callback("start-lsp-io", run_start_lsp_io)
    plugin_runner.add_command_callback("start-lsp-tcp", run_start_lsp_tcp)

    active_context.register_plugin_runner(plugin_runner)
